"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/dashboard/page",{

/***/ "(app-pages-browser)/./lib/audio-recorder-service.ts":
/*!***************************************!*\
  !*** ./lib/audio-recorder-service.ts ***!
  \***************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   audioRecorderService: function() { return /* binding */ audioRecorderService; }\n/* harmony export */ });\nclass AudioRecorderService {\n    async checkPermissions() {\n        try {\n            var _navigator_permissions;\n            if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {\n                console.error(\"MediaDevices API not supported\");\n                return false;\n            }\n            const result = await ((_navigator_permissions = navigator.permissions) === null || _navigator_permissions === void 0 ? void 0 : _navigator_permissions.query({\n                name: \"microphone\"\n            }));\n            console.log(\"Microphone permission status:\", result === null || result === void 0 ? void 0 : result.state);\n            return (result === null || result === void 0 ? void 0 : result.state) === \"granted\" || (result === null || result === void 0 ? void 0 : result.state) === \"prompt\";\n        } catch (error) {\n            console.log(\"Permission check not supported, will try direct access\");\n            return true; // Assume we can try\n        }\n    }\n    async startRecording() {\n        try {\n            // Request microphone access with simpler constraints\n            console.log(\"Requesting microphone access...\");\n            this.stream = await navigator.mediaDevices.getUserMedia({\n                audio: true\n            });\n            console.log(\"Microphone access granted, setting up recorder...\");\n            // Check supported MIME types\n            const mimeTypes = [\n                \"audio/webm;codecs=opus\",\n                \"audio/webm\",\n                \"audio/mp4\",\n                \"audio/wav\"\n            ];\n            let selectedMimeType = \"\";\n            for (const mimeType of mimeTypes){\n                if (MediaRecorder.isTypeSupported(mimeType)) {\n                    selectedMimeType = mimeType;\n                    console.log(\"Using MIME type:\", mimeType);\n                    break;\n                }\n            }\n            if (!selectedMimeType) {\n                selectedMimeType = \"\"; // Let browser choose default\n                console.log(\"Using default MIME type\");\n            }\n            // Create MediaRecorder\n            this.mediaRecorder = new MediaRecorder(this.stream, {\n                mimeType: selectedMimeType\n            });\n            this.audioChunks = [];\n            // Set up event handlers\n            this.mediaRecorder.ondataavailable = (event)=>{\n                console.log(\"Audio data available:\", event.data.size, \"bytes\");\n                if (event.data.size > 0) {\n                    this.audioChunks.push(event.data);\n                }\n            };\n            this.mediaRecorder.onerror = (event)=>{\n                console.error(\"MediaRecorder error:\", event);\n            };\n            // Start recording\n            this.mediaRecorder.start(1000); // Record in 1-second chunks\n            console.log(\"Recording started successfully\");\n        } catch (error) {\n            console.error(\"Failed to start recording:\", error);\n            // More specific error messages\n            if ((error === null || error === void 0 ? void 0 : error.name) === \"NotAllowedError\") {\n                throw new Error(\"Microphone permission denied. Please allow microphone access and try again.\");\n            } else if ((error === null || error === void 0 ? void 0 : error.name) === \"NotFoundError\") {\n                throw new Error(\"No microphone found. Please connect a microphone and try again.\");\n            } else if ((error === null || error === void 0 ? void 0 : error.name) === \"NotReadableError\") {\n                throw new Error(\"Microphone is being used by another application. Please close other apps and try again.\");\n            } else {\n                throw new Error(\"Failed to access microphone: \".concat((error === null || error === void 0 ? void 0 : error.message) || \"Unknown error\"));\n            }\n        }\n    }\n    async stopRecording() {\n        return new Promise((resolve, reject)=>{\n            if (!this.mediaRecorder) {\n                reject(new Error(\"No active recording\"));\n                return;\n            }\n            this.mediaRecorder.onstop = ()=>{\n                const audioBlob = new Blob(this.audioChunks, {\n                    type: \"audio/wav\"\n                });\n                this.cleanup();\n                resolve(audioBlob);\n            };\n            this.mediaRecorder.stop();\n        });\n    }\n    cleanup() {\n        if (this.stream) {\n            this.stream.getTracks().forEach((track)=>track.stop());\n            this.stream = null;\n        }\n        this.mediaRecorder = null;\n        this.audioChunks = [];\n    }\n    isRecording() {\n        var _this_mediaRecorder;\n        return ((_this_mediaRecorder = this.mediaRecorder) === null || _this_mediaRecorder === void 0 ? void 0 : _this_mediaRecorder.state) === \"recording\";\n    }\n    async sendAudioToSTT(audioBlob) {\n        const formData = new FormData();\n        formData.append(\"audio\", audioBlob, \"recording.wav\");\n        const response = await fetch(\"/api/stt\", {\n            method: \"POST\",\n            body: formData\n        });\n        if (!response.ok) {\n            const errorData = await response.json().catch(()=>null);\n            throw new Error((errorData === null || errorData === void 0 ? void 0 : errorData.error) || \"HTTP error! status: \".concat(response.status));\n        }\n        const result = await response.json();\n        return result.transcript || \"\";\n    }\n    constructor(){\n        this.mediaRecorder = null;\n        this.audioChunks = [];\n        this.stream = null;\n    }\n}\nconst audioRecorderService = new AudioRecorderService();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/audio-recorder-service.ts\n"));

/***/ })

});